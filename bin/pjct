#!/usr/bin/env bash


#######################
#  Display utilities  #
#######################

# Number of spaces to shift the commands outputs by.
readonly __SHIFT__=4


# Print in yellow with a new line.
function echo_yellow {
	local -r yellow="\033[1;33m"
	local -r nc="\033[0m"
	printf "${yellow}$*${nc}\n"
}

# Print in red with a new line.
function echo_red {
	local -r red="\033[1;31m"
	local -r nc="\033[0m"
	printf "${red}$*${nc}\n"
}


# Print in green with a new line.
function echo_green {
	local -r green="\033[1;32m"
	local -r nc="\033[0m"
	printf "${green}$*${nc}\n"
}


# Report status
function status {
	echo_green "$@"
}


# Print error and quit
function error {
	echo_red "$@" 1>&2
	return 1
}


# Read each character of stdin, indenting each line.
# Not using sed as explained in this SO post https://stackoverflow.com/a/46495830/5862073
function interactive_indent {
	local -r spaces="$(printf "%${__SHIFT__}s")"
	echo -n "$spaces"
	while IFS= read -r -d '' -n1 chr; do
			[[ $chr == $'\n' ]] && chr="\\n\\r$spaces"
			[[ $chr == $'\r' ]] && chr="\\r$spaces"
			echo -ne "$chr"
	done
	echo -ne '\r'
}


# Execute a command, indenting its output while preserving colors.
function execute_shift_output {
	# Number of columns to use is reduced by the indentation
	local -r columns=$((${COLUMNS:-$(tput -T "${TERM:-xterm}" cols)} - ${__SHIFT__}))
	# `script` cannot run builtin command like `export`
	if [ "$(type -t "$1")" = "builtin" ]; then
		COLUMNS=${columns} "$@"
	else
		# Usage of `script` for MacOS
		if [[ "$(uname -s)" = Darwin* ]]; then
			COLUMNS=${columns} script -q /dev/null "$@" | interactive_indent
		# Usage of `script` for Linux
		else
			# Quote-expand command to avoid space splitting words https://stackoverflow.com/a/12985540/5862073
			local -r command="$(printf "'%s' " "$@")"
			script -feqc "COLUMNS=${columns} ${command}" /dev/null | interactive_indent
		fi
	fi
}


# Wrap calls to manage verbosity, dry-run, ...
function execute {
	echo_yellow "$@"
	if [ "${dry_run}" = "false" ]; then
		## Run the command. Indent both stdout and stderr but preserve them.
		execute_shift_output "$@"
	fi
}


###################
#  Init commands  #
###################


function init_github.com {
	export GH_PROMPT_DISABLED=1
	local -r dir_org="${workspace}/github.com/${org}"
	local -r dir_repo="${dir_org}/${repo}"

	if [[ ! -d "${dir_repo,,}" ]]; then
		if [[ "${org}" == "antoineprv" ]]; then
			execute gh repo clone "${org}/${repo}" "${dir_repo}"
		elif [[ "${org,,}" == "zero-opt" ]]; then
			execute gh repo clone "${org}/${repo}" "${dir_repo}"
		else
			local -r fork_name="fork-${org}-${repo}"
			execute gh repo fork --fork-name "${fork_name}" "${org}/${repo}"
			execute gh repo clone "AntoinePrv/${fork_name}" "${dir_repo}"
			# Point default branch to upstream
			local -r branch="$(git -C "${dir_repo}" rev-parse --abbrev-ref HEAD)"
			execute git -C "${dir_repo}" branch "${branch}" --set-upstream-to "upstream/${branch}"
		fi
	else
		status "Already cloned, updating branches."
		execute git -C "${dir_repo}" fetch --prune --all
	fi
}


function init {
	if [[ ! -n "${provider}"  ]]; then
		provider="github.com"
	fi
	if [[ ! -n "${org}"  ]]; then
		error "Empty org \"${org}\"."
	fi
	if [[ ! -n "${repo}"  ]]; then
		error "Empty repo \"${org}\"."
	fi

	status "Initializing ${provider}/${org}/${repo}"

	"init_${provider}"
}


###################
#  Load commands  #
###################


function update_repo_vars {
	local -r q="$(query)"
	local path="${1}"
	set_option repo "$(basename "${path}")"
	path="$(dirname "${path}")"  # Strip last part
	set_option org "$(basename "${path}")"
	path="$(dirname "${path}")"  # Strip last part
	set_option provider "$(basename "${path}")"
	if [[ ! -n "${path}" ]]; then
		error "Error finding \"${q}\" in \"${workspace}\"."
	fi
}


function query {
	echo "${provider}${provider:+/}${org}${org:+/}${org:-${provider:+/}}${repo}"
}


function find_repo {
	local candidate_dir="${workspace}/${provider}/${org}/${repo}"
	if \
		[[ -n "${provider}" ]] \
		&& [[ -n "${org}" ]]\
		&& [[ -n "${repo}" ]] \
		&& [[ -d "${candidate_dir}" ]]
	then
		update_repo_vars "${candidate_dir}"
	elif type fzf &> /dev/null; then
		local -r subdir="$(
			find "${workspace}" -type d -maxdepth 3 -mindepth 3 \
			| sed "s:${workspace}::" \
			| sed "s:^/::" \
			| fzf --query "$(query)" --select-1 --height=~10 --layout=reverse
		)"
		update_repo_vars "${subdir}"
	else
		local path="$(find "${workspace}" -type d -maxdepth 3 -mindepth 3 -iname "${repo}")"
		if [[ $(echo "${path}" | wc -l ) -gt 1 ]]; then
			error "Query \"$(query)\" is under-specified"
		elif [[ $(echo "${path}" | wc -l ) -eq 0 ]]; then
			error "Could not find \"$(query)\" in \"${workspace}\""
		fi
		update_repo_vars "${}"
		
	fi
}


function load {
	find_repo
	status "Loading ${provider}/${org}/${repo}"

	# May be provider specific
	# TODO the file tmuxp file could be reused
	local -r dir="${workspace}/${provider}/${org}/${repo}"
	execute git -C "${dir}" fetch --prune --all
	export PROJECT="${org}/${repo}"
	execute tmuxp load --yes gh
}


#############
#  Parsing  #
#############


# Update variable if it exists or throw an error.
function set_option {
	local -r key="${1}"
	local -r val="${2}"
	# If variable referenced in key is not set throw error
	if [ -z "${!key+x}" ]; then
		error "Invalid option \"${key}\"."
	# Otherwise update it's value
	else
		printf -v "${key}" "%s" "${val}"
	fi
}


# Parse command line parameters into variables.
#
# Parsing is done as follows. The output variables must be previously defined to avoid errors.
#		--some-key=val	-> some_key="val"
#		--some-key			-> some_key="true"
#		--no-some-key		-> some_key="false"
# As soon as one of this case does not match, all the remaining parameters are put unchanged in
# a `positional` array.
function parse_options {
	while [[ $# -gt 0 ]]; do
		local arg="${1}"
		case "${arg}" in
			--*=*)
				local key="${arg%=*}"
				local key="${key#--}"
				local key="${key//-/_}"
				set_option "${key}" "${arg#*=}"
				shift
				;;
			--no-*)
				local key="${arg#--no-}"
				local key="${key//-/_}"
				set_option "${key}" "false"
				shift
				;;
			--*)
				local key="${arg#--}"
				local key="${key//-/_}"
				set_option "${key}" "true"
				shift
				;;
			*)
				positional=("$@")
				return 0
				;;
		esac
	done
}


function parse_cmd {
	while [[ $# -gt 0 ]]; do
		local arg="${1}"
		case "${arg}" in
			load)
				cmd="load"
				shift
				;;
			init)
				cmd="init"
				shift
				;;
			*/*/*)
				set_option provider "$(basename "$(dirname "$(dirname "${1}")")")"
				set_option org "$(basename "$(dirname "${1}")")"
				set_option repo "$(basename "${1}")"
				shift
				;;
			*/*)
				set_option org "$(dirname "${1}")"
				set_option repo "$(basename "${1}")"
				shift
				;;
			*)
				set_option repo "${1}"
				return 0
				;;
		esac
	done
}


function run_main {
	# Only print the commands that would be executed.
	local dry_run="false"
	# The workspace top directory
	local workspace="${WORKSPACE_DIR}"
	# The Git provider such as github.com
	local provider=""
	# The user or org of the project
	local org=""
	# The name of the repo within the org
	local repo=""

	# Parse all command line arguments.
	parse_options "$@"

	# The command being executed
	local cmd="load"

	# Parse the argument to the command
	parse_cmd "${positional[@]}"

	# Execute command
	"${cmd}"
}


#################
#  Entry point  #
#################


# Run the main when script is not being sourced
if [[ "${BASH_SOURCE[0]}" = "${0}" ]] ; then

	# Fail fast
	set -o errexit
	set -o pipefail
	set -o nounset

	run_main "$@"

fi
